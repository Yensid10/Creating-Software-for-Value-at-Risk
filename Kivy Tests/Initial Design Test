import ctypes
ctypes.windll.user32.SetProcessDPIAware()

from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.label import Label
from kivy.uix.textinput import TextInput
from kivy.properties import ObjectProperty
from kivy.uix.button import Button
from kivy.uix.togglebutton import ToggleButton
import datetime as dt
import numpy as np
from scipy.stats import norm, binom
import yfinance as yf
import pandas as pd

ftse100 = pd.read_html('https://en.wikipedia.org/wiki/FTSE_100_Index')[4]

class ApplicationView(BoxLayout):
    # Declare ObjectProperty variables for the stock list and user inputs
    stockList = ObjectProperty(None)
    userInputs = ObjectProperty(None)
    portfolio = 100000000
    rlPercent = 5 #Maybe change to be a slider and change to 
    timeHori = 1
    simMethod = "Historical"
    currentTicker = ""

    def __init__(self, **kwargs):
        # Call the parent class's constructor
        super(ApplicationView, self).__init__(**kwargs)
        # Populate the stock list and user inputs
        self.populateList()
        self.populateInputs()
        # self.generateVaR()

    def populateList(self):
        for i in range(len(ftse100)):
            button = Button(text=ftse100['Company'][i], size_hint_y=None, height=30, font_size=20)
            #Set the currentStock to the stock ticker that is clicked, and save it to the variable
            button.bind(on_release=lambda btn, i=i: (setattr(self.currentStock, 'text', "Stock: " + ftse100['Ticker'][i]), setattr(self, 'currentTicker', str(ftse100['Ticker'][i])))) 
            self.stockList.add_widget(button)
           
    def simMethodPressed(self, current):
        self.simMethod = current.text
        if current.state == 'normal':
            current.state = 'down'            
            self.populateInputs()
            
    def backTest(self, stock):
        count = 0
        adjust = int(len(stock)/10)
        for i in range(1, len(stock) - adjust - 1):
            backTest = stock['Adj Close'].pct_change()[i:i+adjust]
            if self.simMethod == "Historical":
                VaR = np.percentile(backTest, self.rlPercent)*np.sqrt(self.timeHori)*self.portfolio
            else:
                VaR = (-self.portfolio*norm.ppf(self.rlPercent/100, np.mean(backTest), np.std(backTest)))*np.sqrt(self.timeHori)*-1
            nextDay = stock['Adj Close'].pct_change()[i+adjust:i+adjust+1].values[0]*np.sqrt(self.timeHori)*self.portfolio
            if VaR > nextDay:
                count += 1
        pValue = binom.cdf((len(stock)-adjust)-count,len(stock)-adjust,1-self.rlPercent/100)

        if pValue > self.rlPercent/100:
            setattr(self.backTestCheck, 'color', (0, 1, 0, 1)) #Green
            setattr(self.backTestCheck, 'text', "PASSED: " + str(round(pValue*100, 0)) + "% (p-value)")
        else:
            setattr(self.backTestCheck, 'color', (1, 0, 0, 1)) #Red
            setattr(self.backTestCheck, 'text', "FAILED: " + str(round(pValue*100, 0)) + "% (p-value)")

    def generateVaR(self):
        if self.currentTicker == "":
            setattr(self.valAtRisk, 'text', " VaR: Select a stock")
            return
        endDate = dt.datetime.now()
        startDate = endDate - dt.timedelta(days=1000)
        print(self.currentTicker)
        stock = yf.download(self.currentTicker, startDate, endDate).tail(500)
        try:
            closeDiffs = stock['Adj Close'].pct_change().dropna()
        except:
            stock = yf.download(self.currentTicker + ".L", startDate, endDate).tail(500)
            closeDiffs = stock['Adj Close'].pct_change().dropna()
        if self.simMethod == "Historical":
            # Assuming that N-days VaR = 1-day VaR * sqrt(N)
            VaR = str('{:,}'.format(int(round(np.percentile(closeDiffs, self.rlPercent)*self.portfolio*-1*np.sqrt(self.timeHori), 0))))
        else:
            VaR = str('{:,}'.format(int(round((-self.portfolio*norm.ppf(self.rlPercent/100, np.mean(closeDiffs), np.std(closeDiffs)))*np.sqrt(self.timeHori), 0))))
        
        setattr(self.valAtRisk, 'text', " VaR: £" + VaR)
        
        self.backTest(stock)
                        
    def createButtons(self):
        self.userInputs.add_widget(Label(text="Select Method:", size_hint_y=None, height=30, font_size=20))
        radioButtons = BoxLayout(size_hint_y=None, height=35, padding=[120, 0])
        
        hButton = ToggleButton(text='Historical', group='simMethod', size_hint_x=None, width=100)
        hButton.bind(on_press=self.simMethodPressed)
        if self.simMethod == 'Historical':
            hButton.state = 'down'
        else:
            hButton.state = 'normal'
        radioButtons.add_widget(hButton)

        mButton = ToggleButton(text='Model', group='simMethod', size_hint_x=None, width=100)
        mButton.bind(on_press=self.simMethodPressed)
        if self.simMethod == 'Model':
            mButton.state = 'down'
        else:
            mButton.state = 'normal'
        radioButtons.add_widget(mButton)

        self.userInputs.add_widget(radioButtons)

    def populateInputs(self):
        self.userInputs.clear_widgets()
        # print(self.simMethod)
        self.userInputs.add_widget(Label(text="\n", size_hint_y=None, height=5, font_size=20)) #Adds a gap at the top
        # Create a dictionary of variable names and their corresponding displayed texts
        variables = {
            'portfolio': 'Enter Portfolio Value (£): ',
            'rlPercent': 'Enter Risk Level Percentage (%): ',
            'timeHori': 'Enter Time Horizon (No. of Days): '
        }
        for varName, label in variables.items():
            self.userInputs.add_widget(Label(text=label, size_hint_y=None, height=30, font_size=20))
            centeredLayout = BoxLayout(size_hint_y=None, height=30, padding=[85, 0])
            #Needs to set multiline to false or it won't let you use enter to validate
            text = TextInput(size_hint_x=None, width=275, font_size=15, multiline=False)
            text.bind(on_text_validate=lambda current, varName=varName: (setattr(self, varName, int(current.text)), self.populateInputs()))
            centeredLayout.add_widget(text)
            self.userInputs.add_widget(centeredLayout)
        
        self.createButtons()
        
        if self.portfolio == 100000000 and self.rlPercent == 5 and self.timeHori == 1:
            self.userInputs.add_widget(Label(text="\n\n\n\n\n[u]Current Info Given (Default)[/u]\n" + f"Portfolio Value: £{'{:,}'.format(self.portfolio)}\n" + f"Risk Level Percentage: {self.rlPercent}%\n" + f"Time Horizon: {self.timeHori} day(s)", size_hint_y=None, height=10, markup=True, font_size=20, pos_hint={'center_x': 0.3}))
        else:
            self.userInputs.add_widget(Label(text="\n\n\n\n\n[u]Current Info Given[/u]\n" + f"Portfolio Value: £{'{:,}'.format(self.portfolio)}\n" + f"Risk Level Percentage: {self.rlPercent}%\n" + f"Time Horizon: {self.timeHori} day(s)", size_hint_y=None, height=10, markup=True, font_size=20, pos_hint={'center_x': 0.3}))
        
        self.userInputs.add_widget(Label(text="\n\n\n\n\n\n\n\n\n\n\n\n                                                                                                                       [u]Back-Testing[/u]", size_hint_y=None, height=10, markup=True, font_size=14, color=(0, 0, 0, 1)))

class IDTApp(App):
    def build(self):
        return ApplicationView()

if __name__ == '__main__':
    IDTApp().run()
